[{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/gitee/","section":"Tags","summary":"","title":"Gitee"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/github/","section":"Tags","summary":"","title":"Github"},{"content":"写在前面 #统一说明，我们这里的配置，针对的是账户维度的 SSH 公钥配置，此外还有仓库维度的。仓库维度的密钥只适用于拉取代码用于构建部署，配置方法类似。\n生成 SSH 密钥对 #这里先贴一个 Gitee 生成和配置 SSH 密钥对的文档，这个是中文，而且通俗易懂，生成密钥对的操作对于 Github 也适用\n# -C 选项接的是注释，可以填任意字符串，Github 建议使用邮箱 # 通过键入三次回车完成生成 ssh-keygen -t ed25519 -C \u0026#34;comments\u0026#34; # 查看生成的密钥对文件：id_ed25519 id_ed25519.pub（此为公钥文件，我们要使用的就是它） ls ~/.ssh/ # 读出公钥文件内容，此时终端会显示公钥内容，类似于 “ssh-ed25519 ****** your comments”，拷贝后续使用 cat ~/.ssh/id_ed25519.pub 配置 SSH 公钥 #Github # 进入主页，依次点击头像 -\u0026gt; Settings -\u0026gt; SSH and GPG keys -\u0026gt; New SSH key，在弹窗输入名称和终端拷贝的 SSH 公钥，点击 Add SSH key 保存。\n完成后可以通过 ssh -T git@github.com 进行测试，如果终端输出包含 ‘successful’ 字样便代表配置成功了。\nGitee #Gitee 配置类似\n进入主页，依次点击头像 -\u0026gt; 账号设置 -\u0026gt; SSH 公钥，在右侧输入名称和公钥，点击确定保存即可。\n通过 ssh -T git@gitee.com 进行测试。\n","date":"2025年8月22日","permalink":"https://yyym2017.github.io/sketch/github-ssh-pk-config/","section":"随笔记录","summary":"","title":"Github/Gitee SSH 公钥配置"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/ssh/","section":"Tags","summary":"","title":"SSH"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" “这世上只有一种英雄主义，在认清了生活的真相后依然爱它！” ","date":null,"permalink":"https://yyym2017.github.io/","section":"主页","summary":"","title":"主页"},{"content":"译文 #上星期我去看戏。\n我的位置很好，戏也很有意思，但我却无法欣赏。\n一青年男子与一青年女子坐在我的身后，大声地说着话。\n我非常生气，因为我听不见演员在说什么。\n我回过头去怒视着那一男一女，他们却毫不理会。\n最后， 我忍不住了， 又一次回过头去， 生气地说：“我一个字也听不见了！”\n“不关你的事，” 那男的毫不客气地说，“这是私人间的谈话！”\n课文 #Last week I went to the theatre.\nI have a very good seat.\nThe play was very interesting.\nI did not enjoy it.\nA man and a woman were sitting behind me.\nThey were talking loundly.\nI got very angry.\nI could not hear the actors.\nI turned round.\nI looked at the man and the woman angrily.\nThey did not pay any attention.\nIn the end, I could not bear it.\nI turned round again.\n\u0026ldquo;I can\u0026rsquo;t hear a word!\u0026rdquo; I said angrily.\n\u0026ldquo;It\u0026rsquo;s none of your business,\u0026rdquo; the young man said rudely.\n\u0026ldquo;This is a private conversation!\u0026rdquo;\n","date":"2025年8月21日","permalink":"https://yyym2017.github.io/english/the-new-concept-english/book2/lesson1/","section":"英语学习","summary":"","title":"A private conversation"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/%E6%96%B0%E6%A6%82%E5%BF%B5/","section":"Tags","summary":"","title":"新概念"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/%E8%8B%B1%E8%AF%AD/","section":"Tags","summary":"","title":"英语"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/english/the-new-concept-english/book2/","section":"英语学习","summary":"","title":"第二册"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/english/the-new-concept-english/","section":"英语学习","summary":"","title":"新概念英语学习"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/english/","section":"Tags","summary":"","title":"English"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/","section":"Tags","summary":"","title":"英语语法"},{"content":"概览 #以下思维导图是这篇文章的一个概要\n第一类句型（主语+谓语） #这类句型只包含简单的主语和谓语，主语由名词和代词充当，谓语则由不及物动词充当\n表示来、去、出发、到达等意义的往来动词 go, come, begin, start, leave, arrive, move等 存在动词 exist, be (有，存在) 发生动词 happen, occur等 例句： I go We talk\n要点： 可以包含修饰成分，如介词短语，副词，状语从句等，修饰谓语动词如I study hard, I run fast, We talk loudly，be动词作为“存在，有”的意思可以用于这类句型\n第二类句型（主系表） #包含主语，系动词，表语（补语），表语由名词、代词、形容词充当\n用于这类句型的典型动词包括be动词，become，感官动词，turn，seem等\n例句： I am a student（我是一个学生） We are happy（我们是幸福的） That on the desk is an apple（一个苹果在桌子上）\n第三类句型（主谓宾） #包含主语，谓语（及物动词），宾语\n易混淆的及物动词：reach,resemble,await,marry,attend,mention,discuss,enter\n例句： We will reach BeiJin in two hours（我们将在两小时后抵达北京） Sons resemble their fathers（孩子们长得像他们的父亲） He married her last year（他们在去年结的婚） Students enter the classroom（学生们进入教室）\n第四类句型（主语+谓语+间接宾语+直接宾语） #句型结构包含主语，谓语，间接宾语（人），直接宾语（物）\n作这类句型的谓语的动词称作授予动词，典型的如： give,show,buy,bring,teach,send,lend,make,build,cook,choose,get,order,leave,find\n例句： Someone gave me a piece of cake（有人给了我一片面包） My elder sister shows me some photos（我姐姐给我看了一些照片） My friend bought me a gift（我朋友给我买了一份礼物） She left him a letter（她给他留下了一封信） He asks the teacher a question（他问了老师一个问题）\n第四类句型可以转换为第三类句型，即主谓宾，要注意以下规则：\n动词为give,show,bring,teach,send,lend等，转换时要用 to + 间接宾语\nMy elder sister shows me some photos -\u0026gt; My elder sister shows some photos to me\n动词为make,buy,build,cook,choose,get,order,leave,find等，转换时要用 for + 间接宾语\nShe left him a letter -\u0026gt; She left a letter for him\nask，转换时要用 of + 间接宾语\nHe asks the teacher a question -\u0026gt; He asks a question of the teacher\n第五类句型（主语+谓语+宾语+宾语补语） #句型结构包含主语，谓语，宾语，宾语补语\n对于一般实义动词，宾语补语只能是名词、代词、形容词\n常用于该结构的动词： make,keep,call,think,find,believe,elect\n例句： Playing basketball make us happy（打篮球使我们快乐） We believe him honest（我们相信他是诚实的） Please keep the room clean（请保持房间清洁）\n对于 感官动词 和 使役动词 要接 动词 作为宾语补语，动词原型、现在分词用于主动语态，动词过去分词用于被动语态\n用于主动语态\n感官动词可以接动词原型、动词现在分词，例： I heard her cry/crying（我听见她唱歌） I saw them dance/dancing（我看见他们跳舞）\n使役动词（make、let）接动词原型，例： My teacher makes me study hard（我老师让我刻苦学习） He lets me leave（他让我留下）\n使役动词（have）接动词原型、动词现在分词，例： My mother has me clean/cleaning the room（我妈妈让我清洁房间）\n用于被动语态\n感官动词、使役动词接动词过去分词，例： I heard the window broken（我听见窗户被打碎了） I made my car washed（我洗车了）\nlet 要接 be + 动词过去分词表示被动，例： I let my car be repaired（我修了我的车）\n特殊使役动词get、help\nget 在表主动语态的句型中要用动词不定时作宾语补语，在表被动语态的句型中同样用动词，例： My mom got me to clean my room（我妈让我打扫房间） My mom got my room cleaned by me（被动语态同上）\nhelp 接动词原型和动词不定式表主动，意思相同，没有被动用法，例： Friends helped me complete homework（朋友们帮助我完成作业） Friends helped me to complete homework（同上）\nmake 可以用于多种句型，例如：\nMy mom makes breakfast 我妈做早餐（第三类句型，主谓宾）\nMy mom makes me breakfast 我妈为我做早餐（第四类句型，主谓宾宾）\nMy mom makes breakfast delicious 我妈让早餐美味（第五类句型，主谓宾宾补）\n","date":"2025年8月21日","permalink":"https://yyym2017.github.io/english/syntax/five-sentence-patterns/","section":"英语学习","summary":"","title":"英语语法之五类句型"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/%E8%AF%AD%E6%B3%95/","section":"Tags","summary":"","title":"语法"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/english/syntax/","section":"英语学习","summary":"","title":"语法学习"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/computer/","section":"计算机科学","summary":"","title":"计算机科学"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/math/","section":"数学学习","summary":"","title":"数学学习"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/english/","section":"英语学习","summary":"","title":"英语学习"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"1. 前置条件 # Go 版本：1.25.0 Hugo 版本：v0.148.2+extended Git 2. 安装 Congo 主题 #假定以上软件都有安装，现在我们开始安装 Congo 主题， 参考官方文档。\n# 创建一个 Hugo 网站项目 hugo new site example # 切换目录到项目根目录 cd example git init # 以 git 子模块的方式拉取主题到项目根目录的 themes 文件夹下， # 并拷贝 themes/config 目录到项目根目录同时删除项目默认的网站配置文件 hugo.toml， # 拷贝完之后编辑 config/_default/hugo.toml 文件，键入 theme=\u0026#34;congo\u0026#34; 启用主题 git submodule add -b stable https://github.com/jpanther/congo.git themes/congo # 创建文档，使用支持 markdown 语法的文本编辑器输入内容保存，推荐使用 VSCode + markdown 插件 hugo new posts/test-paper.md # 预览效果 hugo server -D 完成以上步骤并能正常预览效果，便完成了 Congo 主题的安装及默认配置。\n3. 配置主题 #根据需要对项目根目录下 config/_default 中的配置文件进行调整，参考官方文档。\n4. 配置文档写作模板 #编辑项目根目录下 archetypes/default.md 文件。\n# archetypes/default.md --- title: \u0026#34;\u0026#34; date: {{ .Date }} draft: true description: \u0026#34;\u0026#34; tags: [\u0026#39;\u0026#39;] --- 编辑好之后，以后通过 hugo new xxx-dir/xxx-paper.md 创建文档会自动应用模版内容到文档的 Front Matter 部分， 读者还可以根据单个文档进行调整，字段默认值继承自项目根目录 config/_default/params.toml 中的配置\n5. 写作目录结构划分 #参考官方文档目录结构及分类法。\n6. 集成 utterances 评论模块 #utterances 是 Github 默认支持的评论模块，集成进我们的网站不需要后端支持，参考 utterances 文档｜Congo 文档.\n点击此处安装/配置 utterances 到 你的 Github 账户 在项目根目录创建 layouts/_partials/comments.html 文件，将以下内容粘贴进去， 并修改 repo 属性为你自己的 Github 仓库，可以直接用你存放网页文件的仓库 \u0026lt;!-- layouts/_partials/comments.html --\u0026gt; \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;username/reponame\u0026#34; issue-term=\u0026#34;pathname\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; label=\u0026#34;comments\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 修改项目根目录下 config/_default/params.toml 的 showWordCount 为 true # config/_default/params.toml [article] ... showComments = true ... 配置完后预览，便能在文章底部查看到评论模块，用 Github 账户登录就可以进行评论了\n7. 网站托管 #我们使用 Github pages 对我们生成的网站文件进行托管。\n首先需要在 Github 上创建两个仓库，一个用于存放 Hugo 项目的源文件，也就是通过 hugo new site 生成的目录，设为私有（private）； 一个用于存放 hugo 命令生成的网站静态文件，也就是项目根目录下 public 文件夹内容。仓库名必须满足 username.github.io 的格式，设为公开（public）。\n这样做有两点好处，第一，源文件仓库设为私有可以防止被盗用，那如果是这样为什么不以一个仓库既存放源文件也存放构建的目标文件呢？因为我们的目标文件需要托管到 Github pages， 就必须将文件存放的仓库设为公开，这样一个仓库就做不到即为私有又利用 Github pages 进行托管了；第二，可以做到源文件与目标文件的分离，降低了数据安全的风险。\n基本原理是这样的：配置源文件（私有）仓库的 Github actions 生成目标文件，然后推送到目标文件（公开）仓库，所以要用上 access token。\n通过设置生成一个 token，名字随意，这里叫 PAT。\nSettings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens -\u0026gt; Tokens (classic) -\u0026gt; Generate new token -\u0026gt; Generate new token (classic)。\n生成后记得复制保存，后面要用，只会显示一次哦。\n进入源文件仓库，依次 Settings -\u0026gt; Secrets and variables -\u0026gt; Actions -\u0026gt; New repository secret， 这里给 token 还是命名为 PAT，这个名称要记下，后面也要用。\n项目根目录创建 .github/workflows/deploy.yml 文件，这个文件的作用是用于触发 Github actions，键入以下内容：\n# .github/workflows/deploy.yml name: Deploy Hugo Site # 触发条件：推送到私有仓库的 main 分支时执行 on: push: branches: [ \u0026#34;main\u0026#34; ] jobs: deploy: runs-on: ubuntu-latest steps: # 步骤1：拉取私有仓库的源文件 - name: Checkout source repo uses: actions/checkout@v4 with: submodules: recursive # 拉取主题子模块（若使用 submodule 安装主题） fetch-depth: 0 # 步骤2：安装 Hugo（Extended 版本，支持 Sass 等功能） - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # 使用最新版 extended: true # 启用 Extended 版本 # 步骤3：构建静态文件（生成 public 目录） - name: Build run: hugo --minify --gc # --minify 压缩静态资源 # 步骤4：将 public 目录推送到公有仓库（username.github.io） - name: Deploy to public repo uses: peaceiris/actions-gh-pages@v4 with: # 目标仓库：替换为你的公有仓库（username.github.io） external_repository: your-username/your-repository-name # 推送分支：公有仓库的 main 分支（GitHub Pages 通常用 main 或 gh-pages） publish_branch: main # 要推送的内容：Hugo 生成的 public 目录 publish_dir: ./public # 授权令牌：使用私有仓库的 PAT 密钥 personal_token: ${{ secrets.PAT }} # 提交信息（可选，显示为公有仓库的提交记录） commit_message: \u0026#34;Update site: ${{ github.event.head_commit.message }}\u0026#34; 接着配置目标文件仓库 Github pages 托管，选择从分支构建，以上 deploy.yaml 文件已经配置推送分支为 publish_branch: main，这里就用 main 分支，你也可以使用其他分支\n8. 发布网站 #先在项目根目录添加 .gitignore 文件，忽略掉 public 目录的版本变动，这样就不会对目标文件进行提交和推送至远程仓库了。\n# .gitignore public/ .hugo_build.lock 然后将我们本地的 Hugo 源文件做版本提交，并关联 Github 的源文件仓库。\ngit add . git commit -m \u0026#39;commit message\u0026#39; # 统一分支名称 master -\u0026gt; main git branch -m main # 关联远程仓库 git remote add origin git@github.com:username/repository-name # 绑定远程仓库分支 git push --set-upstream origin main 做完这一步，等上一小会，你便能通过 https://username.github.io 访问到你的静态网站了。\n如果许久都没能访问到网站，可以进入源文件仓库查看 Actions 实例的执行情况，看是否是执行失败了，点击实例可以查看执行日志。\n9. 总结 #完成以上工作，你的个人站点便初步搭建好了。\n这篇文章主要是为了记录我个人的网站搭建过程， 留作以后参考用，所以很多细节结合我个人的主观经历省略了，如果读者朋友需要我补充或者不解的地方，欢迎评论区留言。\n以上所有实操都在我的 MacBook Pro 2015（Intel 处理器） 上测试通过，符合前置要求中的软件版本，Windows 电脑理论上也适用\n","date":"2025年8月20日","permalink":"https://yyym2017.github.io/sketch/personal-web-site-buiding/","section":"随笔记录","summary":"","title":"Hugo + Congo 搭建个人站点记录"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/site/","section":"Tags","summary":"","title":"Site"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","section":"Tags","summary":"","title":"个人博客"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/sketch/","section":"随笔记录","summary":"","title":"随笔记录"}]