[{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/computer/","section":"Tags","summary":"","title":"Computer"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/english/","section":"Tags","summary":"","title":"English"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/math/","section":"Tags","summary":"","title":"Math"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/computer/","section":"计算机科学","summary":"","title":"计算机科学"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/math/","section":"数学学习","summary":"","title":"数学学习"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/english/","section":"英语学习","summary":"","title":"英语学习"},{"content":" “这世上只有一种英雄主义，在认清了生活的真相后依然爱它！” ","date":null,"permalink":"https://yyym2017.github.io/","section":"主页","summary":"","title":"主页"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"1. 前置条件 #Hugo 版本：v0.148.2+extended\nGo 版本：1.25.0\n操作系统：MacOS\n已经安装好 Git\n2. 安装 Congo 主题 #在前置条件满足的前提下，我们开始安装 Congo 主题，参考官方文档。\n# 创建一个 Hugo 网站项目 hugo new site example # 切换目录到项目根目录 cd example git init # 以 git 子模块的方式拉取主题到项目根目录的 themes 文件夹下， # 并拷贝 themes/config 目录到项目根目录同时删除项目默认的网站配置文件 hugo.toml， # 拷贝完之后编辑 config/_default/hugo.toml 文件，键入 theme=\u0026#34;congo\u0026#34; 启用主题 git submodule add -b stable https://github.com/jpanther/congo.git themes/congo # 创建文档，使用支持 markdown 语法的文本编辑器输入内容保存，推荐使用 VSCode + markdown 插件 hugo new posts/test-paper.md # 预览效果 hugo server -D 完成以上步骤并能正常预览效果，便完成了 Congo 主题的安装及默认配置。\n3. 配置主题 #根据需要对项目根目录下 config/_default 中的配置文件进行调整，参考官方文档。\n4. 配置文档写作模板 #编辑项目根目录下 archetypes/default.md 文件。\n# archetypes/default.md --- title: \u0026#34;\u0026#34; date: {{ .Date }} draft: true description: \u0026#34;\u0026#34; tags: [\u0026#39;\u0026#39;] --- 5. 写作目录结构划分 #参考官方文档目录结构及分类法。\n6. 网站托管 #我们使用 Github pages 对我们生成的网站文件进行托管。\n首先需要在 Github 上创建两个仓库，一个用于存放 Hugo 项目的源文件，也就是通过 hugo new site 生成的目录，设为私有（private）； 一个用于存放 hugo 命令生成的网站静态文件，也就是项目根目录下 public 文件夹内容。仓库名必须满足 username.github.io 的格式，设为公开（public）。\n这样做有两点好处，第一，源文件仓库设为私有可以防止被盗用，那如果是这样为什么不以一个仓库既存放源文件也存放构建的目标文件呢？因为我们的目标文件需要托管到 Github pages， 就必须将文件存放的仓库设为公开，这样一个仓库就做不到即为私有又利用 Github pages 进行托管了；第二，可以做到源文件与目标文件的分离，降低了数据安全的风险。\n基本原理是这样的：配置源文件（私有）仓库的 Github actions 生成目标文件，然后推送到目标文件（公开）仓库，所以要用上 access token。\n通过设置生成一个 token，名字随意，这里叫 PAT。\nSettings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens -\u0026gt; Tokens (classic) -\u0026gt; Generate new token -\u0026gt; Generate new token (classic)。\n生成后记得复制保存，后面要用，只会显示一次哦。\n进入源文件仓库，依次 Settings -\u0026gt; Secrets and variables -\u0026gt; Actions -\u0026gt; New repository secret， 这里给 token 还是命名为 PAT，这个名称要记下，后面也要用。\n项目根目录创建 .github/workflows/deploy.yaml 文件，这个文件的作用是用于触发 Github actions，键入以下内容：\nname: Deploy Hugo Site # 触发条件：推送到私有仓库的 main 分支时执行 on: push: branches: [ \u0026#34;main\u0026#34; ] jobs: deploy: runs-on: ubuntu-latest steps: # 步骤1：拉取私有仓库的源文件 - name: Checkout source repo uses: actions/checkout@v4 with: submodules: recursive # 拉取主题子模块（若使用 submodule 安装主题） fetch-depth: 0 # 步骤2：安装 Hugo（Extended 版本，支持 Sass 等功能） - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # 使用最新版 extended: true # 启用 Extended 版本 # 步骤3：构建静态文件（生成 public 目录） - name: Build run: hugo --minify --gc # --minify 压缩静态资源 # 步骤4：将 public 目录推送到公有仓库（username.github.io） - name: Deploy to public repo uses: peaceiris/actions-gh-pages@v4 with: # 目标仓库：替换为你的公有仓库（username.github.io） external_repository: your-username/your-repository-name # 推送分支：公有仓库的 main 分支（GitHub Pages 通常用 main 或 gh-pages） publish_branch: main # 要推送的内容：Hugo 生成的 public 目录 publish_dir: ./public # 授权令牌：使用私有仓库的 PAT 密钥 personal_token: ${{ secrets.PAT }} # 提交信息（可选，显示为公有仓库的提交记录） commit_message: \u0026#34;Update site: ${{ github.event.head_commit.message }}\u0026#34; 接着配置目标文件仓库 Github pages 托管，选择从分支构建，以上 deploy.yaml 文件已经配置推送分支为 publish_branch: main，这里就用 main 分支，你也可以使用其他分支\n7. 发布网站 #先在项目根目录添加 .gitignore 文件，忽略掉 public 目录的版本变动，这样就不会对目标文件进行提交和推送至远程仓库了。\npublic/ .hugo_build.lock 然后将我们本地的 Hugo 源文件做版本提交，并关联 Github 的源文件仓库。\ngit add . git commit -m \u0026#39;commit message\u0026#39; # 统一分支名称 master -\u0026gt; main git branch -m main # 关联远程仓库 git remote add origin git@github.com:username/repository-name # 绑定远程仓库分支 git push --set-upstream origin main 做完这一步，等上一小会，你便能通过 https://username.github.io 访问到你的静态网站了。\n如果许久都没能访问到网站，可以进入源文件仓库查看 Actions 实例的执行情况，看是否是执行失败了，点击实例可以查看执行日志。\n8. 总结 #完成以上工作，你的个人站点便初步搭建好了。\n这篇文章主要是为了记录我个人的网站搭建过程， 留作以后参考用，所以很多细节结合我个人的主观经历省略了，如果读者朋友需要我补充或者不解的地方，欢迎评论区留言。\n","date":"2025年8月20日","permalink":"https://yyym2017.github.io/sketch/personal-web-site-buiding/","section":"随笔记录","summary":"","title":"Hugo + Congo 搭建个人站点记录"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/note/","section":"Tags","summary":"","title":"Note"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/record/","section":"Tags","summary":"","title":"Record"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/site/","section":"Tags","summary":"","title":"Site"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/tags/sketch/","section":"Tags","summary":"","title":"Sketch"},{"content":"","date":null,"permalink":"https://yyym2017.github.io/sketch/","section":"随笔记录","summary":"","title":"随笔记录"}]